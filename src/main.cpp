#include "cxxopts.hpp"
#include "lexer.hpp"
#include "lox.hpp"
#include <fmt/color.h>
#include <fmt/format.h>

int main(int argc, char *argv[])
{
    try
    {
        cxxopts::Options options("cpplox", "Lox compiler and interpreter in C++");

        // clang-format off
    options.add_options()
        ("print-tokens",     "Show all tokens generated by the lexer" 
                             " along with line position",
                             cxxopts::value<bool>()->default_value("false"))

        ("dump-bytecode",    "Dumps the bytecode generated by the compiler before execution",
                             cxxopts::value<bool>()->default_value("false"))

        ("trace-execution",  "Used for debugging: Prints the bytecode instruction before executing it",
                             cxxopts::value<bool>()->default_value("false"))

        ("trace-eval-stack", "Used for debugginig: Prints the internal evaluation stack before the instruction is executed",
                             cxxopts::value<bool>()->default_value("false"))

        ("enable-step-mode", "Used for debugging: Enables step mode and waits for input before an instruction is executed",
                             cxxopts::value<bool>()->default_value("false"))

        ("eval-stack-size",  "Maximum evaluation stack size allowed",
                             cxxopts::value<int>()->default_value("1024"))
        
        ("c,command",        "Execute the given command and exit",
                             cxxopts::value<std::string>())

        ("script",           "The lox program file to execute",
                             cxxopts::value<std::string>())

        ("h,help",           "Prints this help message");

    options.parse_positional({"script"});
        // clang-format on
        auto result = options.parse(argc, argv);

        if (result.count("help"))
        {
            fmt::println("{}", options.help());
            exit(0);
        }

        if (!result.unmatched().empty())
        {
            fmt::println("Invalid number of arguments: expected a single argument or none");
            fmt::println("Check out 'cpplox --help' for usage");
        }

        Lox lox;

        if (result.count("command") != 0)
            return lox.run_source(result["command"].as<std::string>());

        if (result.count("script") == 0)
            return lox.run_repl();

        // Run the given file
        return lox.run_file(result["script"].as<std::string>());
    }
    catch (std::exception &e)
    {

        fmt::print(fmt::fg(fmt::color::red), "Error: {}\n", e.what());
        exit(1);
    }
    return 0;
}